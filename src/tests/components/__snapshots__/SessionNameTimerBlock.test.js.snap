// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders SessionNameTimerBlock correctly if timer is started 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SessionNameTimerBlock />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Timer
          displayTime={0}
          onTick={[Function]}
          onTimerEndHandler={[Function]}
          timerPaused={false}
          timerStarted={false}
/>,
        <Unknown
          onChangeHandler={[Function]}
          sessionName=""
/>,
        <div>
          <StartPauseButton
                    startPauseClickHandler={[Function]}
                    timerRunning={false}
          />
          <StopButton
                    onStopHandler={[Function]}
                    timerStarted={false}
          />
</div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "displayTime": 0,
          "onTick": [Function],
          "onTimerEndHandler": [Function],
          "timerPaused": false,
          "timerStarted": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onChangeHandler": [Function],
          "sessionName": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <StartPauseButton
              startPauseClickHandler={[Function]}
              timerRunning={false}
/>,
            <StopButton
              onStopHandler={[Function]}
              timerStarted={false}
/>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "startPauseClickHandler": [Function],
              "timerRunning": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "onStopHandler": [Function],
              "timerStarted": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Timer
            displayTime={0}
            onTick={[Function]}
            onTimerEndHandler={[Function]}
            timerPaused={false}
            timerStarted={false}
/>,
          <Unknown
            onChangeHandler={[Function]}
            sessionName=""
/>,
          <div>
            <StartPauseButton
                        startPauseClickHandler={[Function]}
                        timerRunning={false}
            />
            <StopButton
                        onStopHandler={[Function]}
                        timerStarted={false}
            />
</div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "displayTime": 0,
            "onTick": [Function],
            "onTimerEndHandler": [Function],
            "timerPaused": false,
            "timerStarted": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onChangeHandler": [Function],
            "sessionName": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <StartPauseButton
                startPauseClickHandler={[Function]}
                timerRunning={false}
/>,
              <StopButton
                onStopHandler={[Function]}
                timerStarted={false}
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "startPauseClickHandler": [Function],
                "timerRunning": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "onStopHandler": [Function],
                "timerStarted": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`renders SessionNameTimerBlock correctly if timer is stopped 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SessionNameTimerBlock />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Timer
          displayTime={0}
          onTick={[Function]}
          onTimerEndHandler={[Function]}
          timerPaused={false}
          timerStarted={false}
/>,
        <Unknown
          onChangeHandler={[Function]}
          sessionName=""
/>,
        <div>
          <StartPauseButton
                    startPauseClickHandler={[Function]}
                    timerRunning={false}
          />
          <StopButton
                    onStopHandler={[Function]}
                    timerStarted={false}
          />
</div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "displayTime": 0,
          "onTick": [Function],
          "onTimerEndHandler": [Function],
          "timerPaused": false,
          "timerStarted": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "onChangeHandler": [Function],
          "sessionName": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <StartPauseButton
              startPauseClickHandler={[Function]}
              timerRunning={false}
/>,
            <StopButton
              onStopHandler={[Function]}
              timerStarted={false}
/>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "startPauseClickHandler": [Function],
              "timerRunning": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "onStopHandler": [Function],
              "timerStarted": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Timer
            displayTime={0}
            onTick={[Function]}
            onTimerEndHandler={[Function]}
            timerPaused={false}
            timerStarted={false}
/>,
          <Unknown
            onChangeHandler={[Function]}
            sessionName=""
/>,
          <div>
            <StartPauseButton
                        startPauseClickHandler={[Function]}
                        timerRunning={false}
            />
            <StopButton
                        onStopHandler={[Function]}
                        timerStarted={false}
            />
</div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "displayTime": 0,
            "onTick": [Function],
            "onTimerEndHandler": [Function],
            "timerPaused": false,
            "timerStarted": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onChangeHandler": [Function],
            "sessionName": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <StartPauseButton
                startPauseClickHandler={[Function]}
                timerRunning={false}
/>,
              <StopButton
                onStopHandler={[Function]}
                timerStarted={false}
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "startPauseClickHandler": [Function],
                "timerRunning": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "onStopHandler": [Function],
                "timerStarted": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
